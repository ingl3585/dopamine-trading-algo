# requirements.txt - UPDATED for Pure Black Box Meta-Learning

# Core ML and Data Science
numpy>=1.21.0
pandas>=1.3.0
scikit-learn>=1.0.0
joblib>=1.1.0

# Deep Learning for Self-Evolving Networks
torch>=1.9.0
torchvision>=0.10.0

# Database for Persistent Meta-Learning
# sqlite3 is built-in with Python

# Additional Python standard library modules used:
# (These are built-in with Python 3.7+, noting for completeness)
# - hashlib (cryptographic hashing for pattern IDs)
# - json (JSON serialization for parameters)
# - threading (background learning threads)
# - logging (comprehensive system logging)
# - datetime (temporal pattern analysis)
# - collections (deque for efficient memory management)
# - abc (abstract base classes for subsystems)
# - dataclasses (structured data for patterns)
# - typing (type hints for code clarity)
# - signal (graceful shutdown handling)
# - time (timing and delays)
# - os (file system operations)
# - sys (system operations)
# - random (exploration and sampling)

# Meta-Learning Specific Dependencies:
# All meta-learning functionality uses the packages above
# No additional external dependencies required

# INSTALLATION INSTRUCTIONS:
# 1. Create virtual environment: python -m venv venv
# 2. Activate: venv\Scripts\activate (Windows) or source venv/bin/activate (Linux/Mac)
# 3. Install: pip install -r requirements.txt
# 4. Run diagnostics: python main.py --diagnostics
# 5. Start system: python main.py

# HARDWARE RECOMMENDATIONS for Meta-Learning:
# - CPU: Multi-core recommended for background learning threads
# - RAM: 8GB+ recommended for pattern storage and neural networks
# - Storage: SSD recommended for fast database operations
# - GPU: Optional - CUDA-capable GPU will accelerate neural network evolution

# PURE BLACK BOX FEATURES:
# ✅ Zero hardcoded parameters - everything adapts
# ✅ Self-evolving neural network architecture
# ✅ Adaptive risk management learned from losses
# ✅ Meta-learning of learning rates and thresholds
# ✅ Persistent memory across sessions
# ✅ Complete autonomous operation
# ✅ Tool usage optimization through experience
# ✅ Reward structure discovery